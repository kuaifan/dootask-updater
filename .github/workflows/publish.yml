name: "publish"

on:
  push:
    branches: ["*"]

jobs:
  check-version:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-tag.outputs.should_release }}
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}$"; then
            echo "该版本 v${VERSION} 已发布"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "版本 v${VERSION} 未发布，继续构建"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ needs.check-version.outputs.version }}`,
              name: `Desktop App v${{ needs.check-version.outputs.version }}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""
          - platform: "windows-latest"
            args: "--target aarch64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Download logo file
        run: |
          mkdir -p src-tauri/icons
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.icns -o src-tauri/icons/icon.icns
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.ico -o src-tauri/icons/icon.ico
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.png -o src-tauri/icons/icon.png

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'windows-latest' && contains(matrix.args, 'aarch64') && 'aarch64-pc-windows-msvc' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Upload binary artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.check-version.outputs.version }}
          PLATFORM: ${{ matrix.platform }}
          ARGS: ${{ matrix.args }}
        run: |
          # 定义目标架构映射
          declare -A TARGET_PATHS=(
            ["windows-latest,aarch64"]="aarch64-pc-windows-msvc/release"
            ["macos-latest,x86_64"]="x86_64-apple-darwin/release"
            ["macos-latest,aarch64"]="aarch64-apple-darwin/release"
          )
          
          # 定义平台映射关系
          declare -A PLATFORM_MAP=(
            ["ubuntu-22.04"]="linux-x86_64"
            ["windows-latest,aarch64"]="windows-arm64"
            ["windows-latest,"]="windows-x86_64"
            ["macos-latest,x86_64"]="macos-x86_64"
            ["macos-latest,aarch64"]="macos-arm64"
          )
          
          # 获取平台标识符
          PLATFORM_KEY="${PLATFORM},${ARGS##*--target }"
          
          # 设置路径和文件名
          TARGET_PATH="src-tauri/target/${TARGET_PATHS[$PLATFORM_KEY]:-release}"
          BINARY_NAME="updater${PLATFORM##*windows* && ".exe" || ""}"
          ARTIFACT_NAME="binary_${VERSION}_${PLATFORM_MAP[$PLATFORM_KEY]}.zip"
          
          # 打包并上传
          cd "$TARGET_PATH"
          if [[ "$PLATFORM" == *"windows"* ]]; then
            7z a "$ARTIFACT_NAME" "$BINARY_NAME"
          else
            zip -j "$ARTIFACT_NAME" "$BINARY_NAME"
          fi
          
          echo "正在上传 $ARTIFACT_NAME..."
          gh release upload "v${VERSION}" "$ARTIFACT_NAME" || {
            echo "上传失败，重试..." 
            sleep 3
            gh release upload "v${VERSION}" "$ARTIFACT_NAME"
          }

  publish-release:
    needs: [check-version, create-release, build-tauri]
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
