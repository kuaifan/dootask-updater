name: "publish"

on:
  push:
    branches: ["*"]

jobs:
  check-version:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-tag.outputs.should_release }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}$"; then
            echo "该版本 v${VERSION} 已发布"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "版本 v${VERSION} 未发布，继续构建"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Update version in tauri.conf.json
        if: steps.check-tag.outputs.should_release == 'true'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          # 修改 tauri.conf.json 中的版本号
          jq --arg version "$VERSION" '.version = $version' src-tauri/tauri.conf.json > src-tauri/tauri.conf.json.tmp
          mv src-tauri/tauri.conf.json.tmp src-tauri/tauri.conf.json

  create-release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ needs.check-version.outputs.version }}`,
              name: `Desktop App v${{ needs.check-version.outputs.version }}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: [check-version, create-release]
    if: needs.check-version.outputs.should_release == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
          - platform: "windows-latest"
            args: ""
          - platform: "windows-latest"
            args: "--target aarch64-pc-windows-msvc"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Download logo file
        run: |
          mkdir -p src-tauri/icons
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.icns -o src-tauri/icons/icon.icns
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.ico -o src-tauri/icons/icon.ico
          curl -L https://raw.githubusercontent.com/kuaifan/dootask/pro/public/images/logo-app.png -o src-tauri/icons/icon.png

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'windows-latest' && contains(matrix.args, 'aarch64') && 'aarch64-pc-windows-msvc' || matrix.platform == 'ubuntu-22.04' && contains(matrix.args, 'aarch64') && 'aarch64-unknown-linux-gnu' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
            # 安装ARM64交叉编译所需的包
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install -y libglib2.0-dev-arm64-cross libwebkit2gtk-4.0-dev-arm64-cross libwebkit2gtk-4.1-dev-arm64-cross
            sudo apt-get install -y pkg-config-aarch64-linux-gnu

            # 配置pkg-config以支持交叉编译
            echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
          fi

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Upload binary artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 设置基础变量
          VERSION="${{ needs.check-version.outputs.version }}"
          RELEASE_TAG="v$VERSION"

          # 根据平台设置目录和文件名
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              BINARY_PATH="src-tauri/target/aarch64-unknown-linux-gnu/release"
              ARTIFACT_NAME="binary_${VERSION}_linux-arm64.zip"
            else
              BINARY_PATH="src-tauri/target/release"
              ARTIFACT_NAME="binary_${VERSION}_linux-x86_64.zip"
            fi
            BINARY_NAME="updater"
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              BINARY_PATH="src-tauri/target/aarch64-pc-windows-msvc/release"
              ARTIFACT_NAME="binary_${VERSION}_windows-arm64.zip"
            else
              BINARY_PATH="src-tauri/target/release"
              ARTIFACT_NAME="binary_${VERSION}_windows-x86_64.zip"
            fi
            BINARY_NAME="updater.exe"
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"x86_64"* ]]; then
              BINARY_PATH="src-tauri/target/x86_64-apple-darwin/release"
              ARTIFACT_NAME="binary_${VERSION}_macos-x86_64.zip"
            else
              BINARY_PATH="src-tauri/target/aarch64-apple-darwin/release"
              ARTIFACT_NAME="binary_${VERSION}_macos-arm64.zip"
            fi
            BINARY_NAME="updater"
          fi

          # 进入目标目录
          cd $BINARY_PATH

          # 根据平台选择打包命令
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            7z a $ARTIFACT_NAME $BINARY_NAME
          else
            zip -j $ARTIFACT_NAME $BINARY_NAME
          fi

          # 上传文件
          gh release upload $RELEASE_TAG $ARTIFACT_NAME

  publish-release:
    needs: [check-version, create-release, build-tauri]
    if: needs.check-version.outputs.should_release == 'true' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
